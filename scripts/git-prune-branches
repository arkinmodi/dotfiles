#!/usr/bin/env python3
from __future__ import annotations

import argparse
import subprocess


def _prompt_yes_no(question: str, default: str | None = None) -> bool:
    opts = {"y": True, "ye": True, "yes": True, "n": False, "no": False}

    if not default:
        prompt = '[y/n]'
    elif default == 'yes':
        prompt = '[Y/n]'
    elif default == 'no':
        prompt = '[y/N]'
    else:
        raise ValueError(f'Invalid default prompt "{default}"')

    while True:
        print(f'{question} {prompt} ', end='', flush=True)
        choice = input().lower()
        if default and not choice:
            return opts[default]
        elif choice in opts:
            return opts[choice]


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-f',
        '--force',
        action='store_true',
        help='use git force delete branch',
    )
    parser.add_argument('-n', '--dry-run', action='store_true')
    parser.add_argument(
        '-p',
        '--pick',
        action='store_true',
        help='interactively select branches to delete',
    )
    parser.add_argument(
        '-y',
        '--yes',
        '--assume-yes',
        action='store_true',
        help='assume "yes" as answer to all prompts and run non-interactively',
    )
    args = parser.parse_args()

    current_branch = subprocess.run(
        ['git', 'branch', '--show-current'],
        capture_output=True,
        encoding='UTF-8',
    )

    subprocess.run(['git', 'fetch', '--all', '--prune', '--quiet'])

    upstreams = subprocess.run(
        ['git', 'remote', 'show'],
        capture_output=True,
        encoding='UTF-8',
    )

    if not upstreams.stdout:
        print('No remotes configured!')
        return 1

    origin_info = subprocess.run(
        ['git', 'symbolic-ref', '--short', 'refs/remotes/origin/HEAD'],
        capture_output=True,
        encoding='UTF-8',
    )

    if origin_info.returncode:
        origin_head_not_set_error = 'fatal: ref refs/remotes/origin/HEAD is '\
            'not a symbolic ref\n'

        if origin_info.stderr == origin_head_not_set_error:
            # could also run `git remote set-head origin main` if
            # main is the default branch
            print(
                'origin default branch not set! Try running:\n'
                'git remote set-head origin --auto',
            )
        else:
            print(
                "Failed to get info on origin's default branch! "
                f'Error: {origin_info.stderr}',
            )
        return 1

    default_branch = origin_info.stdout.splitlines()[0].removeprefix('origin/')
    subprocess.run(['git', 'switch', default_branch, '--quiet'])
    subprocess.run(['git', 'pull', '--all', '--prune', '--quiet'])

    upstream_branches = set()
    for remote in upstreams.stdout.splitlines():
        remote_refs = subprocess.run(
            [
                'git',
                'for-each-ref',
                "--format='%(refname:lstrip=3)'",
                f'refs/remotes/{remote}',
            ],
            capture_output=True,
            encoding='UTF-8',
        )
        upstream_branches.update(
            [rr[1:-1] for rr in remote_refs.stdout.splitlines()],
        )
    upstream_branches.discard('HEAD')

    head_refs = subprocess.run(
        [
            'git',
            'for-each-ref',
            "--format='%(refname:lstrip=2)'",
            'refs/heads/',
        ],
        capture_output=True,
        encoding='UTF-8',
    )
    local_branches = {hr[1:-1] for hr in head_refs.stdout.splitlines()}
    victims = local_branches.difference(upstream_branches)

    if not args.yes and args.pick and len(victims):
        victims = {
            v
            for v in victims
            if _prompt_yes_no(f'Delete branch "{v}"?')
        }
    elif len(victims):
        print('Deleting branches:')
        for branch in victims:
            print(branch)
    else:
        print('Nothing to delete.')

    if (
        not args.dry_run and
        len(victims) and
        (
            args.yes or
            _prompt_yes_no('Do you want to continue?')
        )
    ):
        op = ['git', 'branch', '--delete']
        if args.force:
            op.append('--force')
        git_delete = subprocess.run([*op, *victims])

        if git_delete.returncode != 0:
            print('\nNot all branches were deleted. Try running with --force.')

    subprocess.run(
        [
            'git',
            'switch',
            '--quiet',
            current_branch.stdout.splitlines()[0],
        ],
        capture_output=True,
    )

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
