#!/usr/bin/env python3
"""Quickly open remote git stuff"""
from __future__ import annotations

import argparse
import re
import subprocess
import sys
import webbrowser


def _get_repo_url(remote: str) -> str:
    git_url = subprocess.run(
        ['git', 'remote', 'get-url', remote],
        capture_output=True,
        encoding='UTF-8',
    ).stdout.strip()

    if git_url.startswith('http'):
        return git_url.removesuffix('.git').replace('.wiki', '/wiki')
    else:
        _, domain, repo = re.split('@|:', git_url)
        repo = repo.removesuffix('.git').replace('.wiki', '/wiki')
        return f'https://{domain}/{repo}'


def _get_branch_name() -> str:
    return subprocess.run(
        ['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
        capture_output=True,
        encoding='UTF-8',
    ).stdout.strip()


def repo(remote: str, open_browser: bool) -> int:
    url = _get_repo_url(remote)
    print(url)
    if open_browser:
        webbrowser.open_new_tab(url)
    return 0


def pull_request(
    remote: str,
    branch_name: str | None,
    open_browser: bool,
) -> int:
    if not branch_name:
        branch_name = _get_branch_name()

    url = _get_repo_url(remote)
    if url.endswith('/wiki'):
        print("Wikis don't have pull requests", file=sys.stderr)
        return 1

    url += f'/pull/{branch_name}'
    print(url)
    if open_browser:
        webbrowser.open_new_tab(url)
    return 0


def file(
    remote: str,
    branch_name: str | None,
    filepath: str,
    open_browser: bool,
) -> int:
    if not branch_name:
        branch_name = _get_branch_name()
    filename, *line_number = filepath.rsplit(':', maxsplit=1)

    url = _get_repo_url(remote)
    if url.endswith('/wiki'):
        url += f'/{filename.removesuffix(".md")}'
    else:
        url += f'/blob/{branch_name}/{filename}'

    if line_number and line_number[0]:
        url += f'#L{"-L".join(line_number[0].split("-"))}'

    print(url)
    if open_browser:
        webbrowser.open_new_tab(url)
    return 0


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-r',
        '--remote',
        default='origin',
        help='Remote name',
    )
    subparser = parser.add_subparsers(dest='subparser_name')

    repo_parser = subparser.add_parser('repo')
    repo_parser.add_argument(
        '-n',
        '--no-browser',
        action='store_true',
        help='Do not open a repository in the browser',
    )

    pr_parser = subparser.add_parser('pr')
    pr_parser.add_argument('-b', '--branch', help='Branch name')
    pr_parser.add_argument(
        '-n',
        '--no-browser',
        action='store_true',
        help='Do not open a pull request in the browser',
    )

    file_parser = subparser.add_parser('file')
    file_parser.add_argument('-b', '--branch', help='Branch name')
    file_parser.add_argument(
        '-n',
        '--no-browser',
        action='store_true',
        help='Do not open a file in the browser',
    )
    file_parser.add_argument('filename', nargs=1)
    args = parser.parse_args()

    subparser_name = args.subparser_name
    if subparser_name == 'repo':
        return repo(args.remote, not args.no_browser)
    elif subparser_name == 'pr':
        return pull_request(args.remote, args.branch, not args.no_browser)
    elif subparser_name == 'file':
        return file(
            args.remote,
            args.branch,
            args.filename[0],
            not args.no_browser,
        )
    else:
        parser.print_usage()
        return 1


if __name__ == '__main__':
    raise SystemExit(main())
